// win32 Visual C 2010 이상컴파일시 추가
// 프로그램 가장 첫 줄에 추가할 것
#define _CRT_SECURE_NO_WARNINGS
//-----------------------------------------

#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <conio.h>

/* for oracle */
#include <sqlda.h>
#include <sqlca.h>
#include <sqlcpr.h>


// win32 Visual C 2010 이상컴파일시 추가
#define getch() _getch()
//-----------------------------------------

/*---------------  화면 커서 위치 제어 ----------------------*/
#include < windows.h >
void gotoxy(int x, int y) ;
void getxy(int *x, int *y) ;
void clrscr(void) ;
/*-----------------------------------------------------------*/
void print_screen(char fname[]);
void DB_connect();
void J_get_tuple();

void sql_error();

EXEC SQL BEGIN DECLARE SECTION;
	VARCHAR uid[80];
	VARCHAR pwd[20];
EXEC SQL END DECLARE SECTION;

#define getch() _getch()


void main()
{
	DB_connect();
	J_get_tuple();
	getch();
}
void DB_connect()
{
   strcpy((char *)uid.arr,"b20163374@//sedb.deu.ac.kr:1521/orcl");
   uid.len = (short) strlen((char *)uid.arr);
   strcpy((char *)pwd.arr,"20163374");
   pwd.len = (short) strlen((char *)pwd.arr);

   EXEC SQL CONNECT :uid IDENTIFIED BY :pwd;

	// connection이 실패했을경우의 처리부분

	if (sqlca.sqlcode != 0 && sqlca.sqlcode != -1405){ 
		printf("\7Cconnect error: %s", sqlca.sqlerrm.sqlerrmc);
		getch();
		exit(-1);
	}

    printf("Oracle Connect SUCCESS by %s\n", uid.arr);
}

#define PAGE_NUM 5
void J_get_tuple() // 지원이의 소득분위 조회
{
/* --------------------------------------------------------------------------
   Retrieve the current maximum employee number
-------------------------------------------------------------------------- */
EXEC SQL BEGIN DECLARE SECTION;
   varchar j_name[100];
   varchar j_social_num[100];
   varchar j_sal[100];
   varchar j_sal_quint[100];

   char j_dynstmt[1000];
EXEC SQL END DECLARE SECTION;

   char no_tempj_1[10];
   char no_tempj_2[100];
   int x, y, count=0, i ;


   /* Register sql_error() as the error handler. */
   EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");


   /* 사용자 입력 */
   clrscr();

   print_screen("scr_select.txt");

   gotoxy(21,6);
   //printf("찾을 사람의 이름 입력하세요:");
   gets(no_tempj_1); 
   
   
   gotoxy(57,6);
   //printf("찾을 사람의 주민등록번호 입력하세요:");
   gets(no_tempj_2);

      

   /* 실행시킬 SQL 문장*/
   sprintf(dynstmtj_1,"SELECT j_name, j_social_num , j_sal,  case when j_sal between 0 and 100 then '1분위'   when j_sal between 101 and 1000 then '2분위'  when j_sal  between 1001 and 10000 then '3분위'  when j_sal  between 10001 and 100000 then '4분위'   when j_sal > 100000 then '5분위' end 소득분위 FROM jumin WHERE to_char(j_name) LIKE '%%%s%%' and  j_social_num LIKE '%%%s%%' ",  no_tempj_1, no_tempj_2);

   /* select 문장이 제대로 구성되어 있는지 화면에 찍어봄 */
   //printf("dynstmt:%s\n", dynstmt);

   EXEC SQL PREPARE SJ_1 FROM :dynstmtj_1 ;

   /* cursor 선언 */
   EXEC SQL DECLARE c_cursorj_1 CURSOR FOR SJ_1 ; 

   /* cursor open */
   EXEC SQL OPEN c_cursorj_1 ; 

   EXEC SQL WHENEVER NOT FOUND DO break;

   x = 13;
   y = 15 ;

   for (;;)
    {
        EXEC SQL FETCH c_cursorj_1 INTO :j_name, : j_social_num, :j_sal, :j_sal_quint;

	j_name.arr[j_name.len] = '\0' ;
	j_social_num.arr[ j_social_num.len] = '\0';
	j_sal.arr[j_sal.len] = '\0';
            j_sal_quint.arr[j_sal_quint.len] ='\0';

	gotoxy(x,y);
	printf(" %-11s  %-17s  %-12s %-10s " , j_name.arr, j_social_num.arr, j_sal.arr, j_sal_quint.arr);

	y++;
	count++;
	if( count == PAGE_NUM){
	   printf("\n                                  hit any key\n");
	   count = 0;
	   getch();

           gotoxy(0,10); //이전 화면 부분 클리어
           for(i= 0; i < PAGE_NUM; i++){
		printf("                                                          \n");
	   }

	   y = 10 ;
               if(count==0)
                      {printf("검색 결과가 없습니다.");}
	}
         
    }
    printf("                              (END)\n");

    /* Close the cursor. */
   EXEC SQL CLOSE c_cursorj_1;

   EXEC SQL COMMIT ;
}

void print_screen(char fname[])
{
	FILE *fp;
	char line[100];

	if ( (fp = fopen(fname,"r"))  == NULL ){
		printf("file open error\n");
		getch();
		exit(-1);
	}
	while(1)
	{
		if( fgets(line, 99, fp) == NULL){
		     break;
		}
		printf("%s", line);
	}

	fclose(fp);
}

/* --------------------------------------------------------------------------
int sql_error()

   errrpt prints the ORACLE error msg and number.
-------------------------------------------------------------------------- */
void sql_error(char *msg)
{
    char err_msg[128];
    size_t buf_len, msg_len;

    EXEC SQL WHENEVER SQLERROR CONTINUE;

    printf("\n%s\n", msg);
    buf_len = sizeof (err_msg);
    sqlglm(err_msg, &buf_len, &msg_len);
    printf("%.*s\n", msg_len, err_msg);

    getch();
    EXEC SQL ROLLBACK WORK;
    //exit(EXIT_FAILURE);
}
/*---------------  화면 커서 제어 함수 --------------------*/
#define STD_HANDLE GetStdHandle(STD_OUTPUT_HANDLE)

void gotoxy(int x, int y)
{
    COORD Cur= {(SHORT)x, (SHORT) y};

    SetConsoleCursorPosition(STD_HANDLE, Cur);
}

void getxy(int *x, int *y)
{
    CONSOLE_SCREEN_BUFFER_INFO Buf ;

    GetConsoleScreenBufferInfo(GetStdHandle(STD_OUTPUT_HANDLE), &Buf);
    *x = (int)Buf.dwCursorPosition.X ;
    *y = (int)Buf.dwCursorPosition.Y ;
 
}

void clrscr(void)
{
    COORD Cur= {0, 0};
    unsigned long dwLen;

    FillConsoleOutputCharacter(STD_HANDLE, ' ', 80*25, Cur, &dwLen);
}

/*---------------------------------------------------------*/
